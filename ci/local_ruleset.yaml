#
# COPYRIGHT Ericsson 2023
#
#
#
# The copyright to the computer program(s) herein is the property of
#
# Ericsson Inc. The programs may be used and/or copied only with written
#
# permission from Ericsson Inc. or in accordance with the terms and
#
# conditions stipulated in the agreement/contract under which the
#
# program(s) have been supplied.
#

modelVersion: 2.0

description: "Ericsson Java Spring Boot A RAN Topology Adapter, that on receiving a CM handle from NCMP, gets topology tree data for that CM Handle, process the data and sends to Common Topology Services to be persisted. The Adapter consumes topology update notifications and updates the Common Topology Service in the Topology Handler Application"

# See image catalog: https://confluence.lmera.ericsson.se/display/ACD/ADP+CICD+Docker+Image+Catalog
docker-images:
  - maven-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-java11mvnbuilder:${env.MVN_BUILDER_TAG}
  - kube-helm: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-py3kubehelmbuilder:latest
  - adp-release-auto: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-adp-release-auto:${env.RELEASE_AUTO_TAG}


import:
  common: ../common-properties.yaml
  k8s: ../k8s.yaml

# List of constants
properties:
  - settings: settings.xml
  - mvn-flags: "-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn"
  - image-registry-path: armdocker.rnd.ericsson.se/proj-eric-oss
  - image-drop-repopath: ${image-registry-path}-drop
  - image-full-name: ${image-drop-repopath}/${common.docker-image-name}

  # Helm Chart name must follow the pattern: eric-[a-z0-9]{1,5}-[a-z0-9-]{1,30}
  - helm-chart-repo-server-path: https://arm.seli.gic.ericsson.se/artifactory/proj-eric-oss
  - helm-chart-drop-repo: ${helm-chart-repo-server-path}-drop-helm

# import environment variables (For example: Jenkins parameters)
env:
  - HOME
  - PWD
  - PROJ_MVN (default=/proj/mvn)  

  # ADP Marketplace
  - ADP_PORTAL_API_KEY

  # Default docker image tags
  - MVN_BUILDER_TAG (default=latest)
  - RELEASE_AUTO_TAG (default=latest)
  - SELI_ARTIFACTORY_REPO_USER
  - SELI_ARTIFACTORY_REPO_PASS
  - SERO_ARTIFACTORY_REPO_USER
  - SERO_ARTIFACTORY_REPO_PASS

# Variables, set by below tasks
var:
  - current-os-base-version
  - java11-version
  - latest-os-base-version
  - docker-config-basepath
  - image-registry
  - helm-chart-repo-internal
  - image-full-name-internal
  - image-repopath-internal
  - image-repopath-drop
  - version

# Rules to execute
rules:

  # Run test cases only
  # passwd is loaded as volume because test cases use flyway DB which uses embedded PostgreSQL and
  # Embedded pgSQL installation requires non-root user for its installation.
  maven-test:
      # This approach is using for avoiding use root user because built-in bob mechanism
      # using docker works unstable
      # --group-add $(getent group docker | awk -F: '{printf \"%d\", $3}') is Docker group for getting access for docker.sock
    - task: mvn-test
      docker-image: maven-builder
      docker-flags:
        - "-v /etc/passwd:/etc/passwd:ro"
        - "--user $(id -u):$(id -g)"
        - "--group-add $(getent group docker | awk -F: '{printf \"%d\", $3}')"
        - "-v ${env.PWD}:${env.PWD}"
        - "-v /var/run/docker.sock:/var/run/docker.sock"
        - "-v /etc/group:/etc/group:ro"
        - "--workdir ${env.PWD}"
        - "--volume ${env.PROJ_MVN}:/proj/mvn"        
      cmd: mvn -Duser.home=${env.PWD} verify ${mvn-flags} -s ${settings}
  apply-versions:
    - task: apply-versions
      cmd: sed -i "s/OS_BASE_VERSION/${var.current-os-base-version}/" Dockerfile &&
           sed -i "s/JAVA11_VERSION/${var.java11-version}/" Dockerfile      
  # update the OS base image and related java11
  common-base-update:
    - task: get-latest-version-or-exit
      docker-image: kube-helm
      docker-flags:
        - "--network='host'"
      cmd: ./get-latest-common-base-version-or-exit.sh
    - task: update-current-to-latest
      cmd:
        - cp .bob/var.latest-os-base-version .bob/var.current-os-base-version
        - cp .bob/var.latest-os-base-version OS_BASE_VERSION
        - echo "OS BASE VERSION upgraded to:"
        - cat OS_BASE_VERSION
    - task: prepare-java-fetcher
      cmd: sed -i 's/OS_BASE_VERSION/${var.current-os-base-version}/' Dockerfile.java-fetcher
    - task: build-java-fetcher
      cmd: docker build ${env.PWD}
        --no-cache
        --file Dockerfile.java-fetcher
        --tag java-fetcher:latest > ${env.PWD}/.bob/java.tmp
    - task: get-java-version
      cmd:
        - awk '/x86_64/ {print $6}' ${env.PWD}/.bob/java.tmp | sort -u > .bob/var.java11-version
        - cp .bob/var.java11-version JAVA11_VERSION
        - echo "JAVA11_VERSION upgraded to:"
        - cat JAVA11_VERSION
  delete-namespace:
    - rule: k8s.clean
  helm-install:
    - rule: delete-namespace
    - rule: k8s.init
    - rule: k8s.helm-dry-run
    - rule: k8s.helm-install-prep
    - rule: k8s.deploy

  publish:
    - task: package-helm-public
      docker-image: adp-release-auto
      docker-flags:
        - "--env ENABLE_HELM_V3=true"
      cmd: helm-package
        --folder charts/${common.helm-chart-name}
        --workdir .bob --output build
        --version ${var.version}
        --replace VERSION=${var.version}
        --replace eric-product-info.yaml:VERSION=${var.version}
        --replace eric-product-info.yaml:REPO_PATH=${var.image-repopath-drop}
        --replace eric-product-info.yaml:IMAGE_NAME=${common.docker-image-name}
    - task: image-pull-internal
      cmd: docker pull ${var.image-full-name-internal}:${var.version}
    - task: image-tag-public
      cmd: docker tag ${var.image-full-name-internal}:${var.version} ${image-full-name}:${var.version}
    - task: image-push-public
      cmd: docker push ${image-full-name}:${var.version}
    - task: helm-upload
      docker-image: adp-release-auto
      docker-flags:
        - "--env ENABLE_HELM_V3=true"
      cmd: upload_file.sh
        --filename=build/${common.helm-chart-name}-${var.version}.tgz
        --repository=${helm-chart-drop-repo}/${common.helm-chart-name}
        --api-token=${env.SELI_ARTIFACTORY_REPO_PASS}
    - rule: publish-jars

  publish-jars:
    - task: mvn-upload
      docker-image: maven-builder
      docker-flags:
        - "-v /etc/passwd:/etc/passwd:ro"
        - "--user $(id -u):$(id -g)"
        - "--group-add $(getent group docker | awk -F: '{printf \"%d\", $3}')"
        - "-v ${env.PWD}:${env.PWD}"
        - "-v /var/run/docker.sock:/var/run/docker.sock"
        - "-v /etc/group:/etc/group:ro"
        - "--workdir ${env.PWD}"
        - "--volume ${env.PROJ_MVN}:/proj/mvn"
      cmd:
        - git stash && git checkout master
        - mvn -Duser.home=${env.PWD} -Darguments=" -Dmaven.javadoc.skip=true -DskipTests=true" clean deploy ${mvn-flags} -s ${settings}